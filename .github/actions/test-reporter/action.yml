name: 'Test Reporter'
description: 'Generate and publish test reports for CI/CD pipeline'
inputs:
  test-results:
    description: 'Path to test results file'
    required: true
  report-name:
    description: 'Name of the test report'
    required: true
    default: 'Test Results'
  github-token:
    description: 'GitHub token for publishing reports'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Parse Test Results
      shell: bash
      run: |
        echo "Parsing test results from ${{ inputs.test-results }}"
        
        # Check if results file exists
        if [ ! -f "${{ inputs.test-results }}" ]; then
          echo "::error::Test results file not found: ${{ inputs.test-results }}"
          exit 1
        fi
        
        # Parse Jest JSON output
        TOTAL=$(jq '.numTotalTests' "${{ inputs.test-results }}")
        PASSED=$(jq '.numPassedTests' "${{ inputs.test-results }}")
        FAILED=$(jq '.numFailedTests' "${{ inputs.test-results }}")
        PENDING=$(jq '.numPendingTests' "${{ inputs.test-results }}")
        COVERAGE=$(jq -r '.coverageMap // null' "${{ inputs.test-results }}")
        
        # Create summary
        echo "## ${{ inputs.report-name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Results" >> $GITHUB_STEP_SUMMARY
        echo "| Status | Count |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| ✅ Passed | $PASSED |" >> $GITHUB_STEP_SUMMARY
        echo "| ❌ Failed | $FAILED |" >> $GITHUB_STEP_SUMMARY
        echo "| ⏭️ Skipped | $PENDING |" >> $GITHUB_STEP_SUMMARY
        echo "| **Total** | **$TOTAL** |" >> $GITHUB_STEP_SUMMARY
        
        # Add coverage if available
        if [ "$COVERAGE" != "null" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Code Coverage" >> $GITHUB_STEP_SUMMARY
          echo "Coverage data available in artifacts" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Set outputs for use in workflow
        echo "total-tests=$TOTAL" >> $GITHUB_OUTPUT
        echo "passed-tests=$PASSED" >> $GITHUB_OUTPUT
        echo "failed-tests=$FAILED" >> $GITHUB_OUTPUT
        echo "pending-tests=$PENDING" >> $GITHUB_OUTPUT
        
        # Fail if tests failed
        if [ "$FAILED" -gt 0 ]; then
          echo "::error::$FAILED tests failed"
          exit 1
        fi

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const fs = require('fs');
          const results = JSON.parse(fs.readFileSync('${{ inputs.test-results }}', 'utf8'));
          
          const comment = `## 🧪 Test Results
          
          | Status | Count |
          |--------|-------|
          | ✅ Passed | ${results.numPassedTests} |
          | ❌ Failed | ${results.numFailedTests} |
          | ⏭️ Skipped | ${results.numPendingTests} |
          | **Total** | **${results.numTotalTests}** |
          
          ${results.success ? '✅ All tests passed!' : '❌ Some tests failed. Please check the logs.'}
          
          <details>
          <summary>Duration</summary>
          
          Total test suite runtime: ${(results.testResults.reduce((acc, r) => acc + r.perfStats.runtime, 0) / 1000).toFixed(2)}s
          
          </details>`;
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('🧪 Test Results')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }

outputs:
  total-tests:
    description: 'Total number of tests'
    value: ${{ steps.parse-results.outputs.total-tests }}
  passed-tests:
    description: 'Number of passed tests'
    value: ${{ steps.parse-results.outputs.passed-tests }}
  failed-tests:
    description: 'Number of failed tests'
    value: ${{ steps.parse-results.outputs.failed-tests }}
  pending-tests:
    description: 'Number of pending tests'
    value: ${{ steps.parse-results.outputs.pending-tests }}